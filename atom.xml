<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[搬运工]]></title>
  <link href="http://sunninghai.github.io/atom.xml" rel="self"/>
  <link href="http://sunninghai.github.io/"/>
  <updated>2017-01-04T16:05:08+08:00</updated>
  <id>http://sunninghai.github.io/</id>
  <author>
    <name><![CDATA[孙宁海]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Idea常用插件]]></title>
    <link href="http://sunninghai.github.io/blog/2017/01/04/ideachang-yong-cha-jian/"/>
    <updated>2017-01-04T15:14:25+08:00</updated>
    <id>http://sunninghai.github.io/blog/2017/01/04/ideachang-yong-cha-jian</id>
    <content type="html"><![CDATA[<h1>idea 常用插件</h1>

<table>
<thead>
<tr>
<th>插件名称                        </th>
<th>主要用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>Statistic </td>
<td>代码统计</td>
</tr>
<tr>
<td>JRebel Plugin</td>
<td>热部署</td>
</tr>
<tr>
<td>CodeGlance</td>
<td>在编辑代码最右侧，显示一块代码小地图</td>
</tr>
<tr>
<td>MultiMarkdown</td>
<td>书写Markdown文件</td>
</tr>
<tr>
<td>FindBugs</td>
<td>Bug检查</td>
</tr>
<tr>
<td>PWD</td>
<td>java源码检查</td>
</tr>
<tr>
<td>CheckStyle</td>
<td>代码规范检查</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql注意]]></title>
    <link href="http://sunninghai.github.io/blog/2017/01/03/mysqlzhu-yi/"/>
    <updated>2017-01-03T19:25:28+08:00</updated>
    <id>http://sunninghai.github.io/blog/2017/01/03/mysqlzhu-yi</id>
    <content type="html"><![CDATA[<ol>
<li>group by 会自动排序. group by 字段 如果字段没有索引,explain会出现 Using filesort,在对性能要求比较高的时候，可以不自动排序 group by 字段 order by null;</li>
<li>尽量避免 or 查询，因为如果条件中字段没有索引，会导致用不到任何索引，全表扫描;</li>
<li>尽可能字段不要not null,不要认为null 不需要空间，其需要额外的空间;</li>
<li>涉及到ip地址的存储用unsigned int 不要用varchar</li>
<li>尽量少计算、join、排序，有些可以移到应用程序中去做;</li>
<li>尽量用join代替自查询;</li>
<li>union all 替换union, 特别是我们可以确认不会出现重复数据的时候;</li>
<li>避免类型转换，如果类型不一致，在传入参数时进行转换，不然可能会导致不走索引;</li>
<li>关联表时关联字段数据类型长度要一致，不然也可能会导致关联表时索引未使用;</li>
<li>尽量早的过滤数据，特别是在关联表的时候；</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyday]]></title>
    <link href="http://sunninghai.github.io/blog/2016/06/07/everyday/"/>
    <updated>2016-06-07T18:26:07+08:00</updated>
    <id>http://sunninghai.github.io/blog/2016/06/07/everyday</id>
    <content type="html"><![CDATA[<h1>为什么需要分布式配置</h1>

<h2>背景</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[工作问题总结－01]]></title>
    <link href="http://sunninghai.github.io/blog/2016/05/26/gong-zuo-wen-ti-zong-jie-%5Bnil%5D01/"/>
    <updated>2016-05-26T17:36:44+08:00</updated>
    <id>http://sunninghai.github.io/blog/2016/05/26/gong-zuo-wen-ti-zong-jie-[nil]01</id>
    <content type="html"><![CDATA[<h1>service层参数或者返回值验证</h1>

<p>需要在service类上添加注解@Validated,会抛出ConstraintViolationException异常</p>

<h1>restClient 返回实体类List</h1>

<p>默认返回的是List<Map>,需要从Map转化成实体类</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public List listExamByClassId(String classId, String loginUserId,String tenantId) 
</span><span class='line'>{
</span><span class='line'>        return getList("/exam/class/{classId}?loginUserId={userId}&tenantId={tenantId}", new ParameterizedTypeReference&lt;List&lt;Exam&gt;&gt;() {
</span><span class='line'>        },classId,loginUserId,tenantId);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<h1>BigDecimal精度问题</h1>

<p>restTemplate 返回数据反序列化时，默认情况下BigDecimal 直接转换成Double,需要自定义实现ObjectMapper</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;bean id="restTemplate" class="org.springframework.web.client.RestTemplate"&gt;
</span><span class='line'>      &lt;constructor-arg ref="clientHttpRequestFactory"/&gt;
</span><span class='line'>      &lt;property name="errorHandler" ref="responseErrorHandler"&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>      &lt;property name="messageConverters"&gt;
</span><span class='line'>          &lt;list&gt;
</span><span class='line'>              &lt;bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"&gt;
</span><span class='line'>                  &lt;constructor-arg ref="objectMapper"/&gt;
</span><span class='line'>              &lt;/bean&gt;
</span><span class='line'>              &lt;bean class="org.springframework.http.converter.StringHttpMessageConverter"&gt;
</span><span class='line'>              &lt;property name="supportedMediaTypes"&gt;
</span><span class='line'>                      &lt;list&gt;
</span><span class='line'>                          &lt;value&gt;text/plain;charset=UTF-8&lt;/value&gt;
</span><span class='line'>                      &lt;/list&gt;
</span><span class='line'>                  &lt;/property&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>              &lt;/bean&gt;
</span><span class='line'>          &lt;/list&gt;
</span><span class='line'>      &lt;/property&gt;
</span><span class='line'>        &lt;property name="interceptors"&gt;
</span><span class='line'>            &lt;bean class="com.gxb.sites.client.sys.UserAgentHeaderHttpInterceptor"&gt;
</span><span class='line'>            &lt;/bean&gt;
</span><span class='line'>        &lt;/property&gt;
</span><span class='line'>  &lt;/bean&gt;
</span><span class='line'>
</span><span class='line'>public class MyObjectMapper extends ObjectMapper {
</span><span class='line'>    private static final long serialVersionUID = -780913908269501532L;
</span><span class='line'>
</span><span class='line'>    public MyObjectMapper(){
</span><span class='line'>        super();
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);
</span><span class='line'>        //config to ignore unknown property
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
