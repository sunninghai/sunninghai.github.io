<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | 零零碎碎，点点积累]]></title>
  <link href="http://sunninghai.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://sunninghai.github.io/"/>
  <updated>2017-02-04T11:45:12+08:00</updated>
  <id>http://sunninghai.github.io/</id>
  <author>
    <name><![CDATA[sunninghai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql锁相关]]></title>
    <link href="http://sunninghai.github.io/blog/2017/01/06/mysqlsuo-xiang-guan/"/>
    <updated>2017-01-06T15:38:29+08:00</updated>
    <id>http://sunninghai.github.io/blog/2017/01/06/mysqlsuo-xiang-guan</id>
    <content type="html"><![CDATA[<h2>mysql 相关锁相关文章总结</h2>

<p><a href="http://www.hollischuang.com/archives/909">数据库的锁机制</a></p>

<p><a href="http://www.hollischuang.com/archives/914">MySQL中的行级锁,表级锁,页级锁</a></p>

<p><a href="http://www.hollischuang.com/archives/923">MySQL共享锁与排他锁</a></p>

<p><a href="http://www.hollischuang.com/archives/934">深入理解乐观锁与悲观锁</a></p>

<p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段,无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想.<strong><em>不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈</em></strong></p>

<p><a href="http://www.hollischuang.com/archives/943">深入分析事务的隔离级别</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql注意]]></title>
    <link href="http://sunninghai.github.io/blog/2017/01/03/mysqlzhu-yi/"/>
    <updated>2017-01-03T19:25:28+08:00</updated>
    <id>http://sunninghai.github.io/blog/2017/01/03/mysqlzhu-yi</id>
    <content type="html"><![CDATA[<ol>
<li>group by 会自动排序. group by 字段 如果字段没有索引,explain会出现 Using filesort,在对性能要求比较高的时候，可以不自动排序 group by 字段 order by null;</li>
<li>尽量避免 or 查询，因为如果条件中字段没有索引，会导致用不到任何索引，全表扫描;</li>
<li>尽可能字段不要not null,不要认为null 不需要空间，其需要额外的空间;</li>
<li>涉及到ip地址的存储用unsigned int 不要用varchar</li>
<li>尽量少计算、join、排序，有些可以移到应用程序中去做;</li>
<li>尽量用join代替自查询;</li>
<li>union all 替换union, 特别是我们可以确认不会出现重复数据的时候;</li>
<li>避免类型转换，如果类型不一致，在传入参数时进行转换，不然可能会导致不走索引;</li>
<li>关联表时关联字段数据类型长度要一致，不然也可能会导致关联表时索引未使用;</li>
<li>尽量早的过滤数据，特别是在关联表的时候；</li>
</ol>

]]></content>
  </entry>
  
</feed>
